vector-可变大小数组，支持快速随机访问。在尾元素之外的位置插入或删除元素可能很慢。
deque-双端队列。支持快速随机访问。在头尾位置插入/删除速度很快。
list-双向链表。只支持双向顺序访问。在list中任何位置进行插入/删除操作速度很快。
forward_list单向链表。只支持单项顺序访问。在链表任何位置进行插入/删除操作速度很快。
array 固定大小数组。支持快速随机访问。不能添加或删除元素
string 与vector相似的容器，但专门用于保存字符。随机访问快。在尾部插入/删除速度快。





当定义一个array时，除了指定元素类型，还要指定容器大小，虽然不能对内置数组类型进行拷贝和对象赋值操作，但array并无此限制；
标准库array类型允许赋值。赋值号左右两边的运算对象必须有相同的类型；顺序容器（除array）定义了一个assign成员用来进行赋值；
swap操作交换两个相同类型容器（除array）的内容，但是元素本身并未交换，只交换容器的内部数据结构，（除string）指针，迭代器，引用都不不会失效；array交换内容；
除array外，所有标准容器都提供灵活的内存管理，在运行的时候可以动态添加或删除元素来改变容器大小；
容器元素是拷贝，string，list，dque，vector支持push_back；list，forward_list,deque支持push_front;string，list，dque，vector支持push_back；forward_list支持特殊的insert；
新标准引入上个成员emplace_front、emplace、emplace_back分别对应。。。。,这些操作直接构造而不是拷贝对象；
访问：除array都有front成员，除forward_list都有back成员；
如果希望确保下标是合法的，可以使用at成员函数；
删除元素有pop_fornt,pop_forward,erase,clear;
循环程序中应该考虑迭代器、引用和指针失效的问题，程序必须保证在每个循环步中更新迭代器、引用或指针；不要保存end返回的迭代器；
size已经保存的元素的数目，capacity在不分配新的内存空间的前提下最多可以保存的元素，reserve严格按照我们需求的大小分配新的空间。
string提供了一些额外的操作，大部分要么是提供string类和C风格字符数组之间的相互转换，要么是增加了允许用下表代替迭代器的运算。
string额外定义的成员函数，append，repalce，compare；
标准库还定义了三个顺序容器适配器：stack、queue和priority_queue。
适配器是标准库中的一个通用概念。容器、迭代器和函数都有适配器。本质上，一个适配器是一种机制，能使某种事物的行为看起来像另一个事物一样。
所有适配器都要求容器具有添加和删除元素的能力。因此适配器不能构造在array上。
