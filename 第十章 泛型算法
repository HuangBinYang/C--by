顺序容器只定义了很少的操作，所以泛型算法出现了，算法性在于实现了一些经典算法的公共接口，如排序和搜索；泛型在于它们可以用于不同类型的元素和多种容器类型；
一般情况下，算法不直接操作容器，而是遍历由两个迭代器指定的一个元素范围来进行操作。
只读算法：find、count、accumulate、equal。
写容器元素的算法（算法不会执行容器操作，因此他们自身不改变容器的大小），向目的位置迭代器写入数据的算法假定目的位置足够大，能容纳要写入的元素。
写容器元素的算法：fill、back_insert、copy。
重排容器元素的算法：sort、unique，搭配erase可以消除重复；
一个lambda表达式表示一个可调用的代码单元，lambda表达式可以忽略参数列表和返回类型，但必须永远包含捕获列表和函数体。
当定义一个lambda时，编译器生成一个与lambda对应的新的（未命名）的类型。
默认情况下，如果一个lambda体包含return之外的任何语句，则编译器假定此lambda返回void。
当需要为一个lambda定义返回类型时，必须使用尾置返回类型。
除了每个容器定义的迭代器外，标准库还额外定义了几种迭代器。插入迭代器、流迭代器、反向迭代器、移动迭代器。
